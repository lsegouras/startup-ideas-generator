const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const openai = require('openai');
const axios = require("axios");

dotenv.config();
const app = express();
const router = express.Router(); // Define the router
app.use(express.json());
app.use(cors());

const PORT = process.env.PORT || 8000;

// Configure OpenAI API key
const openaiApiKey = process.env.OPENAI_API_KEY;
const openaiClient = new openai({ key: openaiApiKey });

// Route to get all available fields to start a startup
router.get('/startupFields', (req, res) => {
  const startupFields = ['Agriculture', 'Architecture', 'Beauty', 'E-Commerce', 'Education', 'E-Learning', 'Entertainment', 'Fashion', 'Finance', 'Fitness', 'Food', 'Games', 'Health and Wellness', 'Home', 'Human Resources', 'Logistics', 'Marketing', 'Marriage', 'Medicine', 'Mobility', 'Purchasing Management', 'Renewable Energy', 'Sales', 'Smart Cities', 'Social Politics', 'Sustainability', 'Technology', 'Tourism', 'Transportation'];
  res.json({ startupFields });
});

// Route to get all startup options based on the chosen field
router.post('/chooseStartupField', async (req, res) => {
  const { area } = req.body;

  try {
    // Adjust prompt based on field choice
    const prompt = `List 20 Innovative and disruptive ideas in the ${area} field`;

    // Call the OpenAI API to generate startup options based on the chosen field
    const response = await axios.post(
      'https://api.openai.com/v1/engines/text-davinci-002/completions',
      {
        prompt,
        max_tokens: 200,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${openaiApiKey}`,
        },
      }
    );

    // Process API response and extract startup ideas
    const startupOptions = response.data.choices.map(choice => choice.text.trim());
    res.json({ startupOptions });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error when getting startup options. Try again!' });
  }
});

// Function to call the ChatGPT API
async function getDetailsFromChatGPT(prompt) {
  try {
    const response = await openaiClient.complete({
      engine: 'text-davinci-002',
      prompt,
      max_tokens: 200,
    });

    // Extract the response generated by the ChatGPT API
    const detailsFromChatGPT = response.choices[0].text.trim();

    return detailsFromChatGPT;
  } catch (error) {
    console.error(error);
    throw new Error('Error when obtaining startup details.');
  }
}

// Route to get details of a startup based on ID
router.get('/api/getStartupDetails/:id', async (req, res) => {
  const startupId = req.params.id;

  try {
    // Logic to obtain startup details by ID
    const prompt = `Show details of startup ${startupId}, as well as important information and step-by-step to set up the startup`;
    const additionalDetails = await getDetailsFromChatGPT(prompt);

    const startupDetails = {
      id: startupId,
      name: `Startup ${startupId}`,
      additionalDetails,
    };

    res.json({ startupDetails });
  } catch (error) {
    console.error(error.message);
    res.status(404).json({ error: 'Startup not found.' });
  }
});

// Use the router for defined routes
app.use('/', router);

app.listen(PORT, () => console.log('Your Server is running on PORT ' + PORT));